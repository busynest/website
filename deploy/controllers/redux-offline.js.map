{"version":3,"file":"redux-offline.js","sourceRoot":"","sources":["../../src/controllers/redux-offline.ts"],"names":[],"mappings":"AAUA,MAAM,CAAC,MAAM,cAAc,GAAW,gBAAgB,CAAC;AACvD,MAAM,CAAC,MAAM,aAAa,GAAY,eAAe,CAAC;AACtD,MAAM,CAAC,MAAM,cAAc,GAAW,gBAAgB,CAAC;AAUqC,CAAC;AACjB,CAAC;AACD,CAAC;AAY7E,MAAM,KAAK,GAAkB;IACzB,OAAO,EAAS,KAAK;IACrB,cAAc,EAAE,KAAK;CACtB,CAAC;AAGF,MAAM,CAAC,MAAM,OAAO,GAAwC,CAAE,KAAK,GAAG,KAAK,EAAE,MAAM,EAAG,EAAE;IACtF,QAAS,MAAM,CAAC,IAAI,EAAG;QAErB,KAAK,cAAc,CAAC,CAAI,OAAO,EAAE,GAAG,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,EAAE,CAAC;QACrE,KAAK,aAAa,CAAC,CAAK,OAAO,EAAE,GAAG,KAAK,EAAE,cAAc,EAAG,IAAI,EAAE,CAAC;QACnE,KAAK,cAAc,CAAC,CAAI,OAAO,EAAE,GAAG,KAAK,EAAE,cAAc,EAAG,KAAK,EAAE,CAAC;QAEtE;YACE,OAAO,KAAK,CAAC;KAEd;AACH,CAAC,CAAA;AAMH,IAAI,aAAqB,CAAC;AAE1B,MAAM,CAAC,MAAM,YAAY,GAA+B,GAAG,EAAE,CAAC,CAAC,QAAQ,EAAE,EAAE;IACzE,QAAQ,CAAC;QACP,IAAI,EAAE,aAAa;KACpB,CAAC,CAAC;IACH,YAAY,CAAC,aAAa,CAAC,CAAC;IAC5B,aAAa,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,CACrC,QAAQ,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AAC9C,CAAC,CAAC;AAGF,MAAM,CAAC,MAAM,aAAa,GAA+B,CAAC,OAAgB,EAAE,EAAE,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE;IAEpG,IAAI,OAAO,KAAK,QAAQ,EAAE,CAAC,OAAQ,CAAC,OAAO,EAAE;QAC3C,QAAQ,CAAC,YAAY,EAAE,CAAC,CAAC;KAC1B;IACD,QAAQ,CAAC;QACP,IAAI,EAAE,cAAc;QACpB,OAAO;KACR,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["\r\n// iterable interface\r\n\r\nimport { Action }                   from 'redux';\r\nimport { ThunkAction }              from 'redux-thunk';\r\nimport { RootState, RootAction }    from '../store';\r\nimport { Reducer }                  from \"redux\";\r\nimport { ActionCreator}             from 'redux';\r\n\r\n// Module 'Declaration' Bindings to functions, objects, or primitive values\r\nexport const UPDATE_OFFLINE         = 'UPDATE_OFFLINE';\r\nexport const OPEN_SNACKBAR          = 'OPEN_SNACKBAR';\r\nexport const CLOSE_SNACKBAR         = 'CLOSE_SNACKBAR';\r\n\r\n// < > Typescript Interface - Object\r\nexport interface offlineState {\r\n    offline:          boolean,\r\n    snackbarOpened:   boolean,\r\n}\r\n\r\n// < > Typescript Interface Object - Action Array Function\r\n\r\nexport interface setOffline       extends Action<'UPDATE_OFFLINE'>      { offline: boolean };\r\nexport interface setSnackbar      extends Action<'OPEN_SNACKBAR'>       {  };\r\nexport interface setSnackbars     extends Action<'CLOSE_SNACKBAR'>      {  };\r\n\r\n// Merge < > Typescript Interface.\r\nexport type offlineAction = setOffline | setSnackbar | setSnackbars ; \r\n\r\n// Array < > Typescript Type Iterable.\r\nexport type ThunkResult = ThunkAction <void, RootState, undefined, offlineAction>;\r\n\r\n\r\n\r\n\r\n/** Reducer */\r\nconst start : offlineState = {\r\n    offline:        false,\r\n    snackbarOpened: false,\r\n  };\r\n  \r\n  // < > Typescript Reducer Function\r\n  export const offline : Reducer <offlineState, RootAction> = ( state = start, action ) => {\r\n    switch ( action.type ) {\r\n  \r\n      case UPDATE_OFFLINE:    return { ...state, offline: action.offline };\r\n      case OPEN_SNACKBAR:     return { ...state, snackbarOpened:  true };\r\n      case CLOSE_SNACKBAR:    return { ...state, snackbarOpened:  false };\r\n\r\n    default:\r\n      return state;\r\n  \r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n// SHOW SNACKBAR\r\nlet snackbarTimer: number;\r\n\r\nexport const showSnackbar: ActionCreator<ThunkResult> = () => (dispatch) => {\r\n  dispatch({\r\n    type: OPEN_SNACKBAR\r\n  });\r\n  clearTimeout(snackbarTimer);\r\n  snackbarTimer = window.setTimeout(() =>\r\n    dispatch({ type: CLOSE_SNACKBAR }), 3000);\r\n};\r\n\r\n// UPDATE OFFLINE\r\nexport const updateOffline: ActionCreator<ThunkResult> = (offline: boolean) => (dispatch, getState) => {\r\n  // Show the snackbar only if offline status changes.\r\n  if (offline !== getState().offline!.offline) {\r\n    dispatch(showSnackbar());\r\n  }\r\n  dispatch({\r\n    type: UPDATE_OFFLINE,\r\n    offline\r\n  });\r\n};\r\n"]}