{"version":3,"file":"redux-general.js","sourceRoot":"","sources":["../../src/controllers/redux-general.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,KAAK,EAAyB,MAAS,UAAU,CAAC;AAE3D,OAAO,EAAE,WAAW,EAAE,MAAmB,gBAAgB,CAAC;AAG1D,MAAM,CAAC,MAAM,WAAW,GAAc,aAAa,CAAC;AACpD,MAAM,CAAC,MAAM,cAAc,GAAW,gBAAgB,CAAC;AACvD,MAAM,CAAC,MAAM,gBAAgB,GAAS,kBAAkB,CAAC;AAU+B,CAAC;AACE,CAAC;AACA,CAAC;AAS7F,MAAM,KAAK,GAAc;IACrB,IAAI,EAAY,EAAE;IAClB,QAAQ,EAAQ,EAAE;IAClB,OAAO,EAAS,EAAE;CACnB,CAAC;AAGF,MAAM,CAAC,MAAM,GAAG,GAAoC,CAAE,KAAK,GAAG,KAAK,EAAE,MAAM,EAAG,EAAE;IAC9E,QAAS,MAAM,CAAC,IAAI,EAAG;QACrB,KAAK,WAAW,CAAC,CAAS,OAAO,EAAE,GAAG,KAAK,EAAE,IAAI,EAAO,MAAM,CAAC,IAAI,EAAE,CAAC;QACtE,KAAK,cAAc,CAAC,CAAM,OAAO,EAAE,GAAG,KAAK,EAAE,OAAO,EAAI,MAAM,CAAC,OAAO,EAAE,CAAC;QACzE,KAAK,gBAAgB,CAAC,CAAI,OAAO,EAAE,GAAG,KAAK,EAAE,QAAQ,EAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;QAC1E;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,CAAA;AAKH,MAAM,CAAC,MAAM,QAAQ,GAAgC,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC,QAAQ,EAAE,EAAE;IAClF,MAAM,IAAI,GAAG,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,kBAAkB,CAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAE,CAAC;IAEzE,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IACzB,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;IACrB,KAAK,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;AAChC,CAAC,CAAC;AAGF,MAAM,QAAQ,GAA+B,CAAC,IAAY,EAAE,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;IAChF,QAAO,IAAI,EAAE;QAIX,KAAK,MAAM;YACT,MAAM,CAAC,SAAS,CAAC,CAAC;YAClB,MAAM;QAER,KAAK,MAAM;YACT,MAAM,CAAC,SAAS,CAAC,CAAC;YAClB,MAAM;QAER,KAAK,UAAU;YACb,MAAM,CAAC,aAAa,CAAC,CAAC;YACtB,MAAM;QAER,KAAK,SAAS;YAEZ,MAAM;QAER;YACE,IAAI,GAAG,MAAM,CAAC;YACd,MAAM,MAAM,CAAC,eAAe,CAAC,CAAC;KACjC;IAED,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAA;AAGD,MAAM,UAAU,GAA2B,CAAC,IAAY,EAAE,EAAE;IAC1D,OAAO;QACL,IAAI,EAAE,WAAW;QACjB,IAAI;KACL,CAAC;AACJ,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,eAAe,GAAiC,CAAE,QAAgB,EAAI,EAAE;IACnF,OAAO,EAAE,IAAI,EAAE,gBAAgB,EAAE,QAAQ,EAAE,CAAA;AAC7C,CAAC,CAAC;AAGF,MAAM,CAAC,MAAM,WAAW,GAAgC,CAAE,OAAe,EAAG,EAAE;IAC5E,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,OAAO,EAAE,CAAC;AAC3C,CAAC,CAAC","sourcesContent":["\r\n// iterable interface\r\nimport { Action }                   from 'redux';\r\nimport { ThunkAction }              from 'redux-thunk';\r\nimport { store, RootState, RootAction }    from '../store';\r\nimport { Reducer, ActionCreator }   from \"redux\";\r\nimport { closeDrawer }              from './redux-drawer';\r\n\r\n// Module 'Declaration' Bindings to functions, objects, or primitive values\r\nexport const UPDATE_PAGE            = 'UPDATE_PAGE';\r\nexport const PUBLIC_PROFILE         = 'PUBLIC_PROFILE';\r\nexport const CURRENT_FEEDBACK       = \"CURRENT_FEEDBACK\";         // FEEDBACK POSTS\r\n\r\n// < > Module 'Interface' Object\r\nexport interface AppState {\r\n    page:             string,\r\n    feedback:         object,\r\n    profile:          object\r\n}\r\n\r\n// < > Module Interface Object - extends Action Array - wit Payload Function\r\nexport interface setPage          extends Action<'UPDATE_PAGE'>         { page: string };\r\nexport interface profileData      extends Action<'PUBLIC_PROFILE'>      { profile: object };\r\nexport interface userFeedback     extends Action<\"CURRENT_FEEDBACK\">    { feedback: object };\r\n\r\n// < > Merge Declarations to Combine Type Interfaces.\r\nexport type appAction = setPage | profileData | userFeedback ; \r\n\r\n// < > Array Type Iterable. Immutable state context \r\nexport type ThunkResult = ThunkAction <void, RootState, undefined, appAction>;\r\n\r\n// Object Initializer Notation\r\nconst start : AppState = {\r\n    page:           '',\r\n    feedback:       [],\r\n    profile:        []\r\n  };\r\n  \r\n  // < > Typescript Reducer Function\r\n  export const app : Reducer <AppState, RootAction> = ( state = start, action ) => {\r\n    switch ( action.type ) {\r\n      case UPDATE_PAGE:         return { ...state, page:      action.page };\r\n      case PUBLIC_PROFILE:      return { ...state, profile:   action.profile };\r\n      case CURRENT_FEEDBACK:    return { ...state, feedback:  action.feedback };\r\n      default:\r\n        return state;\r\n    }\r\n  }\r\n\r\n// Action - Helper Functions\r\n\r\n// URL NAVTIGATION\r\nexport const navigate : ActionCreator<ThunkResult> = (path: string) => (dispatch) => {\r\n  const page = path === '/' ? 'home' : decodeURIComponent( path.slice(1) );\r\n  // if ( page === \"network\" && window.location.hash ) { dispatch(loadPage('network')); }\r\n  dispatch(loadPage(page));\r\n  window.scrollTo(0,0);\r\n  store.dispatch(closeDrawer());\r\n};\r\n\r\n// LOAD PAGE\r\nconst loadPage: ActionCreator<ThunkResult> = (page: string) => async (dispatch) => {\r\n  switch(page) {\r\n\r\n/** Landing Page / Search */\r\n\r\n    case 'home':\r\n      import('../home');\r\n      break;\r\n\r\n    case 'page':\r\n      import('../page');\r\n      break;\r\n\r\n    case 'feedback':\r\n      import('../feedback');\r\n      break;\r\n\r\n    case 'privacy':\r\n      // import('../terms');\r\n      break;\r\n  \r\n    default:\r\n      page = 'oops';\r\n      await import('../wrong-page');\r\n  }\r\n\r\n  dispatch(updatePage(page));\r\n}\r\n\r\n// UPDATE PAGE\r\nconst updatePage: ActionCreator<setPage> = (page: string) => {\r\n  return {\r\n    type: UPDATE_PAGE,\r\n    page\r\n  };\r\n}\r\n\r\nexport const articleFeedback : ActionCreator<userFeedback> = ( feedback: object  ) => {\r\n  return { type: CURRENT_FEEDBACK, feedback }\r\n};\r\n\r\n\r\nexport const profileInfo : ActionCreator<profileData> = ( profile: object ) => {\r\n  return { type: PUBLIC_PROFILE, profile };\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n      // case SELECT_TITLE:   return { ...state, current: action.current };\r\n      // case OPEN_CLOSE:          return { ...state, active:  action.active };\r\n      // case SELECT_TITLE:        return { ...state, title:   action.title };\r\n\r\n\r\n\r\n// export const OPEN_CLOSE             = 'OPEN_CLOSE';\r\n// export const COMMUNITY_PUBLISH      = 'COMMUNITY_PUBLISH';\r\n// export const PUBLIC_CONTRACT        = 'PUBLIC_CONTRACT';\r\n// export const INDIVIDUAL_PROFILE     = \"LOGGED_STATE\";\r\n// export const SELECT_TITLE           = 'SELECT_TITLE';\r\n// export const INDIVIDUAL_CONTRACT    = 'INDIVIDUAL_CONTRACT';      // PUBLISH INDIVIDUAL\r\n// export const INDIVIDUAL_ID          = 'INDIVIDUAL_ID';            // IDENTIFICATION        \r\n// export const PUBLIC_ID              = 'PUBLIC_ID';                // PUBLIC ID\r\n\r\n\r\n// export interface customerID       extends Action<'INDIVIDUAL_ID'>       {  };\r\n// export interface customerID3      extends Action<'PUBLIC_ID'>           { pid: string };\r\n// export interface menuSelect       extends Action<'SELECT_TITLE'>        { title: string };\r\n// export interface menuDrawer       extends Action<'OPEN_CLOSE'>          { active: string };\r\n// export interface publishConsent   extends Action<'COMMUNITY_PUBLISH'>   {  };\r\n// export interface journalEntry     extends Action<\"LOGGED_STATE\">        { user: boolean };\r\n// export interface publishConsent2  extends Action<'INDIVIDUAL_CONTRACT'>  {  };\r\n// export interface publishConsent3  extends Action<'PUBLIC_CONTRACT'>     {  };\r\n\r\n\r\n\r\n\r\n/*\r\n  // TITLE PAGE - < > Typescript + Redux = Action Array returned action \"type\"\r\n  export const titlePage: ActionCreator <appAction> = ( title: string ) => {\r\n    switch(title) {\r\n  \r\n      case 'appetizers':\r\n        break;\r\n      case 'sides':\r\n        break;\r\n      case 'entrees':\r\n        break;\r\n      case 'fish':\r\n        break;\r\n      case 'steaks':\r\n          break;\r\n    \r\n      default:\r\n        title = 'appetizers';\r\n    \r\n      }\r\n    \r\n    // dispatch(updateTitlePage(page));\r\n    return { type: SELECT_TITLE, title }\r\n  }\r\n\r\n*/\r\n\r\n  // export const current_User : ActionCreator<currentUser> = ( user:  boolean ) => {\r\n     // return { type: CURRENT_USER, user };\r\n    // };\r\n"]}