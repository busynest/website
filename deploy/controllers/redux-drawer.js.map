{"version":3,"file":"redux-drawer.js","sourceRoot":"","sources":["../../src/controllers/redux-drawer.ts"],"names":[],"mappings":"AAMA,MAAM,CAAC,MAAM,SAAS,GAAI,WAAW,CAAC;AACtC,MAAM,CAAC,MAAM,UAAU,GAAG,YAAY,CAAC;AAMgC,CAAC;AACD,CAAC;AAQxE,MAAM,KAAK,GAAgB,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;AAE7C,MAAM,CAAC,MAAM,MAAM,GAAqC,CAAE,KAAK,GAAG,KAAK,EAAE,MAAM,EAAG,EAAE;IAClF,QAAS,MAAM,CAAC,IAAI,EAAG;QAErB,KAAK,SAAS,CAAC,CAAS,OAAO,EAAE,GAAG,KAAK,EAAE,MAAM,EAAW,IAAI,EAAE,CAAC;QACnE,KAAK,UAAU,CAAC,CAAQ,OAAO,EAAE,GAAG,KAAK,EAAE,MAAM,EAAW,KAAK,EAAE,CAAC;QAEtE,OAAO,CAAC,CAAC,OAAO,KAAK,CAAC;KAErB;AACH,CAAC,CAAA;AAGD,MAAM,CAAC,MAAM,SAAS,GAAgC,CAAE,MAAe,EAAG,EAAE,CAAC,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE;IAChG,IAAK,QAAQ,EAAE,CAAC,MAAO,CAAC,MAAM,KAAK,KAAK,EAAG;QAAE,QAAQ,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;KAAE;SACzC;QAAE,QAAQ,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC,CAAC;KAAE;AACzF,CAAC,CAAA;AAGD,MAAM,CAAC,MAAM,WAAW,GAA6B,CAAE,MAAgB,EAAG,EAAE;IAC1E,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,EAAE,CAAA;AACrC,CAAC,CAAC","sourcesContent":["\r\nimport { Action, Reducer, ActionCreator }  from 'redux';\r\nimport { ThunkAction }            from 'redux-thunk';\r\nimport { RootState, RootAction }  from '../store';\r\n\r\n// Module 'Declaration' Bindings to functions, objects, or primitive values\r\nexport const OPEN_SIGN  = 'OPEN_SIGN';\r\nexport const CLOSE_SIGN = 'CLOSE_SIGN';\r\n\r\n// < > Module Interface Object - extends Action Array - wit Payload Function\r\nexport interface drawerState { drawer: boolean }\r\n\r\n// < > Module Interface Object - extends Action Array - wit Payload Function\r\nexport interface openSign     extends Action<'OPEN_SIGN'>          {  };\r\nexport interface closeSign    extends Action<'CLOSE_SIGN'>         {  };\r\n\r\n// < > Merge Declarations to Combine Type Interfaces.\r\nexport type drawerAction = openSign | closeSign ;\r\n\r\n// < > Array Type Iterable.\r\nexport type drawerResult = ThunkAction<void, RootState, undefined, drawerAction>;\r\n\r\nconst start: drawerState = { drawer: false };\r\n  \r\nexport const drawer: Reducer<drawerState, RootAction> = ( state = start, action ) => {\r\n  switch ( action.type ) {\r\n\r\n    case OPEN_SIGN:         return { ...state, drawer:          true };\r\n    case CLOSE_SIGN:        return { ...state, drawer:          false };\r\n\r\n  default: return state;\r\n\r\n  }\r\n}\r\n\r\n// DRAWER STATE\r\nexport const setDrawer: ActionCreator<drawerResult> = ( drawer: boolean ) => (dispatch, getState) => {\r\n    if ( getState().drawer!.drawer === false)  { dispatch({ type: OPEN_SIGN, drawer }); }\r\n    else                                        { dispatch({ type: CLOSE_SIGN, drawer }); }\r\n  }\r\n  \r\n  // DRAWER CLOSE\r\n  export const closeDrawer: ActionCreator<closeSign> = ( drawer:  boolean ) => {\r\n    return { type: CLOSE_SIGN, drawer }\r\n  };\r\n  \r\n  "]}