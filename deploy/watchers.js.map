{"version":3,"file":"watchers.js","sourceRoot":"","sources":["../src/watchers.ts"],"names":[],"mappings":"","sourcesContent":["//@ts-check\n/*\n// USER WATCHER\nexport const installUserWatcher = (userUpdatedCallback) => {\n  console.log('user WATCHER');\n  // REDUX-THUNK - action creators that return a function instead of an action.\n  window.addEventListener('userOnline',   () => userUpdatedCallback(false));\n  window.addEventListener('userOffline',  () => userUpdatedCallback(true));\n  userUpdatedCallback(firebase.auth().currentUser === true);\n};\n*/\n/*\n// FEEDBACK WATCHER\nexport const installFeedbackWatcher = (openFeedback) => {\n  // REDUX-THUNK - action creators that return a function instead of an action.\n  window.addEventListener('openFeedback',     () => openFeedback(true));\n  window.addEventListener('closedFeedback',   () => openFeedback(false));\n};\n\n// PROJECT WATCHER\nexport const installProjects = (createProject) => {\n  // REDUX-THUNK - action creators that return a function instead of an action.\n  window.addEventListener('openProject',    () => createProject(true));\n  window.addEventListener('closeProject',   () => createProject(false));\n};\n\n// PROJECT WATCHER\nexport const installProjects = (createProject) => {\n  // REDUX-THUNK - action creators that return a function instead of an action.\n  window.addEventListener('openProject',    () => createProject(true));\n  window.addEventListener('closeProject',   () => createProject(false));\n};\n*/\n/*\nexport const installGeo = () => {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(showPosition);\n    console.log(geolocation);\n  }\n};*/\n/*\nexport const installOfflineWatcher = (offlineUpdatedCallback) => {\n  window.addEventListener('online', () => offlineUpdatedCallback(false));\n  window.addEventListener('offline', () => offlineUpdatedCallback(true));\n  offlineUpdatedCallback(navigator.onLine === false);\n};\n*/\n\n\n/*\nexport const currentTime = (updateTime) => {\n  updateTime()\n}\n*/"]}